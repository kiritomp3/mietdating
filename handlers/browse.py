import logging
from aiogram import Router, types
from aiogram.types import CallbackQuery
from sqlalchemy.sql import func
from sqlalchemy.orm import Session
from db import SessionLocal
from models import User, Like
from keyboards import get_browse_keyboard, main_menu

print("üìå browse.py –∑–∞–≥—Ä—É–∂–µ–Ω!")
router = Router()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
def get_random_profile(exclude_user_id: int):
    with SessionLocal() as db:
        user = db.query(User).filter(
            User.id != exclude_user_id,
            User.is_active == True
        ).order_by(func.random()).first()
        return user

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–π–∫–∞ –≤ –ë–î
def save_like(user_id: int, liked_user_id: int):
    with SessionLocal() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        existing_like = db.query(Like).filter(
            Like.user_id == liked_user_id,
            Like.liked_user_id == user_id
        ).first()

        if existing_like:
            existing_like.is_mutual = True
            db.commit()
            return True  # –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        else:
            new_like = Like(user_id=user_id, liked_user_id=liked_user_id, is_mutual=False)
            db.add(new_like)
            db.commit()
            return False  # –û–±—ã—á–Ω—ã–π –ª–∞–π–∫

# üîç –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"
@router.message(lambda msg: msg.text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def browse_profiles(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.")
    
    user = get_random_profile(exclude_user_id=user_id)
    if user:
        profile_text = (
            f"üìú –ê–Ω–∫–µ—Ç–∞:\n\n"
            f"üë§ –ò–º—è: {user.name}\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birthdate}\n"
            f"üèô –ì–æ—Ä–æ–¥: {user.city}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user.description if user.description else '‚Äî'}"
        )
        keyboard = get_browse_keyboard(user.id)  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã –≤ –∫–Ω–æ–ø–∫—É!

        if user.photo_id:
            await message.answer_photo(photo=user.photo_id, caption=profile_text, reply_markup=keyboard)
        else:
            await message.answer(profile_text, reply_markup=keyboard)
    else:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç.", reply_markup=main_menu)

# ‚ù§Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–õ–∞–π–∫"
@router.callback_query(lambda c: c.data.startswith("like:"))
async def like_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_user_id = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã –∏–∑ callback_data

    with SessionLocal() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–∞–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
        existing_like = db.query(Like).filter_by(user_id=user_id, liked_user_id=target_user_id).first()
        if existing_like:
            await callback.answer("–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –ë–î
        like = Like(user_id=user_id, liked_user_id=target_user_id)
        db.add(like)
        db.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        mutual_like = db.query(Like).filter_by(user_id=target_user_id, liked_user_id=user_id).first()
        if mutual_like:
            like.is_mutual = True
            mutual_like.is_mutual = True
            db.commit()

            # –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º username —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = db.query(User).filter_by(id=target_user_id).first()

            username_text = f"üë§ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @{target_user.username}"
            await callback.bot.send_message(user_id, username_text)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫–Ω—É—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∫–µ—Ç—É —Ç–æ–≥–æ, –∫—Ç–æ –µ–≥–æ –ª–∞–π–∫–Ω—É–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–õ–∞–π–∫" –∏ "–î–∏–∑–ª–∞–π–∫"
            liker = db.query(User).filter_by(id=user_id).first()
            profile_text = (f"üíå –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å!\n\n"
                            f"üë§ –ò–º—è: {liker.name}\n"
                            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {liker.birthdate}\n"
                            f"üèô –ì–æ—Ä–æ–¥: {liker.city}\n"
                            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {liker.description if liker.description else '‚Äî'}")

            keyboard = get_browse_keyboard(liker.id)  # –ö–Ω–æ–ø–∫–∏ "–õ–∞–π–∫" –∏ "–î–∏–∑–ª–∞–π–∫"

            if liker.photo_id:
                await callback.bot.send_photo(chat_id=target_user_id, photo=liker.photo_id, caption=profile_text, reply_markup=keyboard)
            else:
                await callback.bot.send_message(chat_id=target_user_id, text=profile_text, reply_markup=keyboard)

    await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    await send_new_profile(callback)

# üíî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–∏–∑–ª–∞–π–∫"
@router.callback_query(lambda c: c.data.startswith("dislike:"))
async def dislike_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_id = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫ –∞–Ω–∫–µ—Ç–µ {target_id}.")
    await callback.answer("üíî –î–∏–∑–ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    await send_new_profile(callback)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
async def send_new_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_random_profile(exclude_user_id=user_id)

    if user:
        profile_text = (
            f"üìú –ê–Ω–∫–µ—Ç–∞:\n\n"
            f"üë§ –ò–º—è: {user.name}\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birthdate}\n"
            f"üèô –ì–æ—Ä–æ–¥: {user.city}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user.description if user.description else '‚Äî'}"
        )
        keyboard = get_browse_keyboard(user.id)  # –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã –≤ –∫–Ω–æ–ø–∫—É

        if user.photo_id:
            await callback.message.answer_photo(photo=user.photo_id, caption=profile_text, reply_markup=keyboard)
        else:
            await callback.message.answer(profile_text, reply_markup=keyboard)
    else:
        await callback.message.answer("–ù–µ—Ç –±–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç.", reply_markup=main_menu)