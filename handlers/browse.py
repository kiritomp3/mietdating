import logging
import sqlite3
from aiogram import Router, types
from aiogram.types import CallbackQuery
from db import DATABASE_PATH, get_random_profile, like_profile, add_viewed_profile
from keyboards import get_browse_keyboard, main_menu
from datetime import datetime, timedelta
from handlers.profile import calculate_age
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

print("üìå browse.py –∑–∞–≥—Ä—É–∂–µ–Ω!")
router = Router()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# üîç –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"
@router.message(lambda msg: msg.text == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def browse_profiles(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.")

    user = get_random_profile(user_id)

    if user:
        age = calculate_age(user["date_of_birth"]) if user["date_of_birth"] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        profile_text = (
            f"{user['first_name']}, {age}, {user['city']} ‚Äî {user['biography']}"
        )
        keyboard = get_browse_keyboard(user["id"])

        if user["photo"]:
            await message.answer_photo(photo=user["photo"], caption=profile_text, reply_markup=keyboard)
        else:
            await message.answer(profile_text, reply_markup=keyboard)
    else:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=main_menu)

# ‚ù§Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–õ–∞–π–∫"
@router.callback_query(lambda c: c.data.startswith("like:"))
async def like_profile_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_user_id = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã

    is_mutual = like_profile(user_id, target_user_id)

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT username FROM users WHERE user_tg_id = ?", (target_user_id,))
    target_username = cursor.fetchone()[0]

    cursor.execute("SELECT username FROM users WHERE user_tg_id = ?", (user_id,))
    user_username = cursor.fetchone()[0]


    if is_mutual:

        cursor.execute("DELETE FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (user_id, target_user_id))
        cursor.execute("DELETE FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (target_user_id, user_id))
        conn.commit()


        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ
        await callback.bot.send_message(user_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á!\n @{target_username}")
        await callback.bot.send_message(target_user_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á!\n @{user_username}")
    else:
        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫–Ω—É—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∫–µ—Ç—É —Ç–æ–≥–æ, –∫—Ç–æ –µ–≥–æ –ª–∞–π–∫–Ω—É–ª
        liker = get_random_profile(target_user_id)  # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ

        if liker:
            age = calculate_age(liker["date_of_birth"]) if liker["date_of_birth"] else "–ù–µ —É–∫–∞–∑–∞–Ω"
            profile_text = (f"üíå –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å:\n\n"
                            f"{liker['first_name']}, {age}, {liker['city']}  ‚Äî {liker['biography']}")

            keyboard = get_browse_keyboard(liker["id"])

            if liker["photo"]:
                await callback.bot.send_photo(chat_id=target_user_id, photo=liker["photo"], caption=profile_text, reply_markup=keyboard)
            else:
                await callback.bot.send_message(chat_id=target_user_id, text=profile_text, reply_markup=keyboard)
    conn.close()
    
    await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await send_new_profile(callback)

# üíî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–∏–∑–ª–∞–π–∫"
@router.callback_query(lambda c: c.data.startswith("dislike:"))
async def dislike_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_id = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫ –∞–Ω–∫–µ—Ç–µ {target_id}.")
    await callback.answer("üíî")

    await send_new_profile(callback)

class SpamState(StatesGroup):
    waiting_for_text = State()

# üì© –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∞–º –∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data.startswith("spam:"))
async def spam_profile(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'spam'"""
    user_id = callback.from_user.id
    target_user_id = int(callback.data.split(":")[1])  # ID –∞–Ω–∫–µ—Ç—ã

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(target_user_id=target_user_id)

    await callback.message.answer("üì© –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await state.set_state(SpamState.waiting_for_text)

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å

@router.message(SpamState.waiting_for_text)
async def send_spam_message(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 'spam' —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id
    user_text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    data = await state.get_data()
    target_user_id = data.get("target_user_id")  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–±–∞–≤–ª–µ–Ω LEFT JOIN –¥–ª—è —Ñ–æ—Ç–æ)
    cursor.execute("""
        SELECT u.first_name, u.date_of_birth, u.city, u.biography, p.photo 
        FROM users u
        LEFT JOIN photos p ON u.user_tg_id = p.user_tg_id
        WHERE u.user_tg_id = ?
    """, (user_id,))
    sender = cursor.fetchone()
    conn.close()

    if not sender:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    age = calculate_age(sender[1]) if sender[1] else "–ù–µ —É–∫–∞–∑–∞–Ω"
    profile_text = (f"üåû –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å:\n\n"
                    f"{sender[0]}, {age}, {sender[2] if sender[2] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"{sender[3] if sender[3] else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {user_text}")

    keyboard = get_browse_keyboard(user_id)  # –ö–Ω–æ–ø–∫–∏ "–õ–∞–π–∫" –∏ "–î–∏–∑–ª–∞–π–∫"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É + —Å–æ–æ–±—â–µ–Ω–∏–µ
    if sender[4]:  # –§–æ—Ç–æ
        await message.bot.send_photo(chat_id=target_user_id, photo=sender[4], caption=profile_text, reply_markup=keyboard)
    else:
        await message.bot.send_message(chat_id=target_user_id, text=profile_text, reply_markup=keyboard)

    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await send_new_profile(message)
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
async def send_new_profile(callback):
    user_id = callback.from_user.id  # ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è Message, –∏ –¥–ª—è CallbackQuery
    user = get_random_profile(user_id)

    if user:
        age = calculate_age(user["date_of_birth"]) if user["date_of_birth"] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        profile_text = (
            f"{user['first_name']}, {age}, {user['city']} ‚Äî {user['biography']}"
        )
        keyboard = get_browse_keyboard(user["id"])  # –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã –≤ –∫–Ω–æ–ø–∫—É

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback –æ–±—ä–µ–∫—Ç–æ–º Message –∏–ª–∏ CallbackQuery
        if isinstance(callback, CallbackQuery):
            target = callback.message
        else:  # –ó–Ω–∞—á–∏—Ç, —ç—Ç–æ –æ–±—ä–µ–∫—Ç Message
            target = callback

        if user["photo"]:
            await target.answer_photo(photo=user["photo"], caption=profile_text, reply_markup=keyboard)
        else:
            await target.answer(profile_text, reply_markup=keyboard)
    else:
        if isinstance(callback, CallbackQuery):
            await callback.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=main_menu)
        else:
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=main_menu)