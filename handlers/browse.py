import logging
import sqlite3
import asyncio
from aiogram import Router, types
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from db import DATABASE_PATH, get_random_profile, like_profile, add_viewed_profile
from keyboards import main_menu
from datetime import datetime
from handlers.profile import calculate_age
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

print("üìå browse.py –∑–∞–≥—Ä—É–∂–µ–Ω!")
router = Router()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BrowseState(StatesGroup):
    browsing = State()
    waiting_for_spam_text = State()

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç
browse_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫"), KeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫")],
        [KeyboardButton(text="üò¥ –°–ø–∞—Ç—å")],
        #KeyboardButton(text="üöÄ –°–ø–∞–º"),
    ],
    resize_keyboard=True
)

# ‚úÖ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç
@router.message(lambda msg: msg.text == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def browse_profiles(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.")

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT who_chose FROM likes WHERE who_was_chosen = ?
        ORDER BY RANDOM()
        LIMIT 1
    """, (user_id,))
    liked_user = cursor.fetchone()

    if liked_user:
        liked_user_id = liked_user[0]

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ
        cursor.execute("""
            SELECT u.user_tg_id, u.first_name, u.date_of_birth, u.city, u.biography, p.photo 
            FROM users u
            LEFT JOIN photos p ON u.user_tg_id = p.user_tg_id
            WHERE u.user_tg_id = ?
        """, (liked_user_id,))
        user = cursor.fetchone()

        if user:
            profile_dict = {
                "id": user[0],
                "first_name": user[1],
                "date_of_birth": user[2],
                "city": user[3],
                "biography": user[4],
                "photo": user[5],
            }
            await state.update_data(current_profile=profile_dict)

            age = calculate_age(user[2]) if user[2] else "–ù–µ —É–∫–∞–∑–∞–Ω"
            profile_text = f"üíå –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å:\n\n{user[1]}, {age}, {user[3]} ‚Äî {user[4]}"

            if user[5]:
                await message.answer_photo(photo=user[5], caption=profile_text, reply_markup=browse_menu)
            else:
                await message.answer(profile_text, reply_markup=browse_menu)

            conn.close()
            return

    # ‚úÖ –ï—Å–ª–∏ –ª–∞–π–∫–Ω—É–≤—à–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    user = get_random_profile(user_id)
    
    if user:
        await state.update_data(current_profile=user)
        age = calculate_age(user["date_of_birth"]) if user["date_of_birth"] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        profile_text = f"{user['first_name']}, {age}, {user['city']} ‚Äî {user['biography']}"

        if user["photo"]:
            await message.answer_photo(photo=user["photo"], caption=profile_text, reply_markup=browse_menu)
        else:
            await message.answer(profile_text, reply_markup=browse_menu)

        await state.set_state(BrowseState.browsing)  # ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç
    else:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=main_menu)

    conn.close()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–õ–∞–π–∫"
@router.message(lambda msg: msg.text == "‚ù§Ô∏è –õ–∞–π–∫")
async def like_profile_action(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º—ç—Ç—á"""
    data = await state.get_data()

    if "current_profile" not in data:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã...")
        await send_new_profile(message, state)
        return

    user_id = message.from_user.id
    target_user_id = data["current_profile"]["id"]

    logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∞–π–∫–∞–µ—Ç –∞–Ω–∫–µ—Ç—É {target_user_id}")

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # ‚úÖ –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∞–π–∫ –≤ –ë–î –∏ –∫–æ–º–º–∏—Ç–∏–º –µ–≥–æ
    cursor.execute("INSERT INTO likes (who_chose, who_was_chosen) VALUES (?, ?)", (user_id, target_user_id))
    conn.commit()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–ª—Å—è –ª–∏ –ª–∞–π–∫
    cursor.execute("SELECT who_chose, who_was_chosen FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (user_id, target_user_id))
    new_like = cursor.fetchone()
    if new_like:
        logger.info(f"‚úÖ –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω: {new_like}")
    else:
        logger.error(f"‚ùå –õ–∞–π–∫ –ù–ï –∑–∞–ø–∏—Å–∞–ª—Å—è! –û—à–∏–±–∫–∞ –≤ –ë–î!")

    # ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º—ç—Ç—á –ü–û–°–õ–ï –∑–∞–ø–∏—Å–∏ –ª–∞–π–∫–∞
    cursor.execute("SELECT id FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (target_user_id, user_id))
    mutual_like = cursor.fetchone()

    if mutual_like:
        logger.info(f"‚úÖ –ú—ç—Ç—á! {user_id} –∏ {target_user_id} –≤–∑–∞–∏–º–Ω–æ –ª–∞–π–∫–Ω—É–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.")

        # ‚úÖ –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –º—ç—Ç—á–∞
        cursor.execute("DELETE FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (user_id, target_user_id))
        cursor.execute("DELETE FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (target_user_id, user_id))

        # ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ likes_received —É –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("UPDATE users SET likes_received = likes_received - 1 WHERE user_tg_id = ? AND likes_received > 0", (user_id,))
        cursor.execute("UPDATE users SET likes_received = likes_received - 1 WHERE user_tg_id = ? AND likes_received > 0", (target_user_id,))
        conn.commit()

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º usernames –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT username FROM users WHERE user_tg_id = ?", (target_user_id,))
        target_username = cursor.fetchone()[0]

        cursor.execute("SELECT username FROM users WHERE user_tg_id = ?", (user_id,))
        user_username = cursor.fetchone()[0]

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute("SELECT likes_received FROM users WHERE user_tg_id = ?", (target_user_id,))
        target_likes_count = cursor.fetchone()[0]
        cursor.execute("SELECT likes_received FROM users WHERE user_tg_id = ?", (user_id,))
        user_likes_count = cursor.fetchone()[0]

        conn.close()

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—ç—Ç—á–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤
        await message.bot.send_message(user_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á!\n @{target_username}\nüíå –û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–ø–∞—Ç–∏–π: {user_likes_count}")
        await message.bot.send_message(target_user_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á!\n @{user_username}\nüíå –û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–ø–∞—Ç–∏–π: {target_likes_count}")

    else:
        logger.info(f"üöÄ –ù–µ—Ç –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞. {user_id} –ø—Ä–æ—Å—Ç–æ –ª–∞–π–∫–Ω—É–ª {target_user_id}")

        # ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET likes_received = likes_received + 1 WHERE user_tg_id = ?", (target_user_id,))
        conn.commit()

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
        cursor.execute("SELECT likes_received FROM users WHERE user_tg_id = ?", (target_user_id,))
        likes_count = cursor.fetchone()[0]

        conn.close()

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ
        await message.bot.send_message(target_user_id, f"üíå –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å ({likes_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º).")

    await message.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await send_new_profile(message, state)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–∏–∑–ª–∞–π–∫"
@router.message(lambda msg: msg.text == "üëé –î–∏–∑–ª–∞–π–∫")
async def dislike_profile_action(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫.")
    await send_new_profile(message, state)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–ø–∞–º"
@router.message(lambda msg: msg.text == "üöÄ –°–ø–∞–º")
async def spam_profile_action(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º—ç—Ç—á"""
    data = await state.get_data()
    
    if "current_profile" not in data:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã...")
        await send_new_profile(message, state)
        return

    user_id = message.from_user.id
    target_user_id = data["current_profile"]["id"]

    logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '–°–ø–∞–º' –¥–ª—è –∞–Ω–∫–µ—Ç—ã {target_user_id}")

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # ‚úÖ –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∞–π–∫ –≤ –ë–î –∏ –∫–æ–º–º–∏—Ç–∏–º –µ–≥–æ
    cursor.execute("INSERT INTO likes (who_chose, who_was_chosen) VALUES (?, ?)", (user_id, target_user_id))
    conn.commit()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–ª—Å—è –ª–∏ –ª–∞–π–∫
    cursor.execute("SELECT who_chose, who_was_chosen FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (user_id, target_user_id))
    new_like = cursor.fetchone()
    if new_like:
        logger.info(f"‚úÖ –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω: {new_like}")
    else:
        logger.error(f"‚ùå –õ–∞–π–∫ –ù–ï –∑–∞–ø–∏—Å–∞–ª—Å—è! –û—à–∏–±–∫–∞ –≤ –ë–î!")

    # ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º—ç—Ç—á –ü–û–°–õ–ï –∑–∞–ø–∏—Å–∏ –ª–∞–π–∫–∞
    cursor.execute("SELECT id FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (target_user_id, user_id))
    mutual_like = cursor.fetchone()

    if mutual_like:
        logger.info(f"‚úÖ –ú—ç—Ç—á! {user_id} –∏ {target_user_id} –≤–∑–∞–∏–º–Ω–æ –ª–∞–π–∫–Ω—É–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.")

        # ‚úÖ –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –º—ç—Ç—á–∞
        cursor.execute("DELETE FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (user_id, target_user_id))
        cursor.execute("DELETE FROM likes WHERE who_chose = ? AND who_was_chosen = ?", (target_user_id, user_id))

        # ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ likes_received —É –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("UPDATE users SET likes_received = likes_received - 1 WHERE user_tg_id = ? AND likes_received > 0", (user_id,))
        cursor.execute("UPDATE users SET likes_received = likes_received - 1 WHERE user_tg_id = ? AND likes_received > 0", (target_user_id,))
        conn.commit()

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º usernames –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT username FROM users WHERE user_tg_id = ?", (target_user_id,))
        target_username = cursor.fetchone()[0]
        cursor.execute("SELECT username FROM users WHERE user_tg_id = ?", (user_id,))
        user_username = cursor.fetchone()[0]

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute("SELECT likes_received FROM users WHERE user_tg_id = ?", (target_user_id,))
        target_likes_count = cursor.fetchone()[0]
        cursor.execute("SELECT likes_received FROM users WHERE user_tg_id = ?", (user_id,))
        user_likes_count = cursor.fetchone()[0]

        conn.close()

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—ç—Ç—á–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤
        await message.bot.send_message(user_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á!\n @{target_username}\nüíå –û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–ø–∞—Ç–∏–π: {user_likes_count}")
        await message.bot.send_message(target_user_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á!\n @{user_username}\nüíå –û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–ø–∞—Ç–∏–π: {target_likes_count}")

        # ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ –ø–æ—Å–ª–µ –º—ç—Ç—á–∞
        await message.answer("‚ù§Ô∏è –ú—ç—Ç—á! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ...")
        await send_new_profile(message, state)

    else:
        logger.info(f"üöÄ –ù–µ—Ç –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞. {user_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '–°–ø–∞–º' –¥–ª—è {target_user_id}")

        # ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET likes_received = likes_received + 1 WHERE user_tg_id = ?", (target_user_id,))
        conn.commit()

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
        cursor.execute("SELECT likes_received FROM users WHERE user_tg_id = ?", (target_user_id,))
        likes_count = cursor.fetchone()[0]

        conn.close()

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ
        await message.bot.send_message(target_user_id, f"üíå –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å ({likes_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º).")

        # ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∞–º–∞
        await state.update_data(target_user_id=target_user_id)
        await message.answer("üì© –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        await state.set_state(BrowseState.waiting_for_spam_text)

@router.message(BrowseState.waiting_for_spam_text)
async def send_spam_message(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 'spam' —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id
    user_text = message.text
    data = await state.get_data()
    target_user_id = data.get("target_user_id")

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    cursor.execute("""
        SELECT u.user_tg_id, u.first_name, u.date_of_birth, u.city, u.biography, p.photo 
        FROM users u
        LEFT JOIN photos p ON u.user_tg_id = p.user_tg_id
        WHERE u.user_tg_id = ?
    """, (user_id,))
    sender = cursor.fetchone()

    if not sender:
        conn.close()
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    age = calculate_age(sender[2]) if sender[2] else "–ù–µ —É–∫–∞–∑–∞–Ω"
    profile_text = (f"üåû –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å:\n\n"
                    f"{sender[1]}, {age}, {sender[3] if sender[3] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"{sender[4] if sender[4] else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {user_text}")

    keyboard = browse_menu

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É + —Å–æ–æ–±—â–µ–Ω–∏–µ
    if sender[5]:  # –§–æ—Ç–æ
        await message.bot.send_photo(chat_id=target_user_id, photo=sender[5], caption=profile_text, reply_markup=keyboard)
    else:
        await message.bot.send_message(chat_id=target_user_id, text=profile_text, reply_markup=keyboard)

    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ last_sent_profile –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    cursor.execute("UPDATE users SET last_sent_profile = ? WHERE user_tg_id = ?", (user_id, target_user_id))
    conn.commit()
    conn.close()

    await send_new_profile(message, state)
    await state.clear()

# ‚úÖ –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ("–°–ø–∞—Ç—å")
@router.message(lambda msg: msg.text == "üò¥ –°–ø–∞—Ç—å")
async def exit_browse_mode(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
async def send_new_profile(message, state: FSMContext):
    user_id = message.from_user.id
    user = get_random_profile(user_id)

    if user:
        await state.update_data(current_profile=user)
        age = calculate_age(user["date_of_birth"]) if user["date_of_birth"] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        profile_text = f"{user['first_name']}, {age}, {user['city']} ‚Äî {user['biography']}"

        if user["photo"]:
            await message.answer_photo(photo=user["photo"], caption=profile_text, reply_markup=browse_menu)
        else:
            await message.answer(profile_text, reply_markup=browse_menu)
    else:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=main_menu)
