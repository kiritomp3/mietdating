import logging
from aiogram import Router, types
from aiogram.types import CallbackQuery
from sqlalchemy.sql import func
from sqlalchemy.orm import Session
from db import SessionLocal
from models import User, Like, ViewedProfile
from keyboards import get_browse_keyboard, main_menu
from datetime import datetime, timedelta
from sqlalchemy import and_
from handlers.profile import calculate_age

print("üìå browse.py –∑–∞–≥—Ä—É–∂–µ–Ω!")
router = Router()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
def get_random_profile(exclude_user_id: int):
    with SessionLocal() as db:
        five_minutes_ago = datetime.utcnow() - timedelta(minutes=5)

        recently_viewed = db.query(ViewedProfile.target_id).filter(
            and_(
                ViewedProfile.user_id == exclude_user_id,
                ViewedProfile.viewed_at >= five_minutes_ago
            )
        ).subquery()

        user = db.query(User).filter(
            and_(
                User.id != exclude_user_id,
                User.is_active == True,
                ~User.id.in_(recently_viewed)
            )
        ).order_by(func.random()).first()

        if user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
            viewed = ViewedProfile(user_id=exclude_user_id, target_id=user.id)
            db.add(viewed)
            db.commit()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
            return {
                "id": user.id,
                "name": user.name,
                "birthdate": user.birthdate,
                "city": user.city,
                "description": user.description,
                "photo_id": user.photo_id
            }

    return None  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç

# üîç –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"
@router.message(lambda msg: msg.text == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def browse_profiles(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.")
    
    user = get_random_profile(exclude_user_id=user_id)
    
    if user:
        age = calculate_age(user["birthdate"])
        profile_text = (
            f"{user['name']}, "
            f"{age}, "
            f"{user['city']} ‚Äî "
            f"{user['description'] if user['description'] else ''}"
        )
        keyboard = get_browse_keyboard(user["id"])

        if user["photo_id"]:
            await message.answer_photo(photo=user["photo_id"], caption=profile_text, reply_markup=keyboard)
        else:
            await message.answer(profile_text, reply_markup=keyboard)
    else:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=main_menu)

# ‚ù§Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–õ–∞–π–∫"
@router.callback_query(lambda c: c.data.startswith("like:"))
async def like_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_user_id = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã –∏–∑ callback_data

    with SessionLocal() as db:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –ë–î
        like = Like(user_id=user_id, liked_user_id=target_user_id)
        db.add(like)
        db.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        mutual_like = db.query(Like).filter_by(user_id=target_user_id, liked_user_id=user_id).first()
        if mutual_like:
            # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏ –∏–∑ –ë–î
            db.delete(like)
            db.delete(mutual_like)
            db.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            target_user = db.query(User).filter_by(id=target_user_id).first()
            user = db.query(User).filter_by(id=user_id).first()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
            username_text = f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á!\n @{target_user.username}"
            await callback.bot.send_message(user_id, username_text)

            await callback.bot.send_message(target_user_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á!\n@{user.username}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫–Ω—É—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∫–µ—Ç—É —Ç–æ–≥–æ, –∫—Ç–æ –µ–≥–æ –ª–∞–π–∫–Ω—É–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–õ–∞–π–∫" –∏ "–î–∏–∑–ª–∞–π–∫"
            liker = db.query(User).filter_by(id=user_id).first()
            if liker:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ liker –Ω–∞–π–¥–µ–Ω
                age = calculate_age(liker.birthdate)
                profile_text = (f"üíå –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å!\n\n"
                                f"{liker.name}, "
                                f"{age}, "
                                f"{liker.city}  ‚Äî "
                                f"{liker.description if liker.description else ''}")

                keyboard = get_browse_keyboard(liker.id)

                if liker.photo_id:
                    await callback.bot.send_photo(chat_id=target_user_id, photo=liker.photo_id, caption=profile_text, reply_markup=keyboard)
                else:
                    await callback.bot.send_message(chat_id=target_user_id, text=profile_text, reply_markup=keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∞–π–∫ –ù–ï –±—ã–ª –≤–∑–∞–∏–º–Ω—ã–º
            await send_new_profile(callback)

    await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# üíî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–∏–∑–ª–∞–π–∫"
@router.callback_query(lambda c: c.data.startswith("dislike:"))
async def dislike_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_id = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫ –∞–Ω–∫–µ—Ç–µ {target_id}.")
    await callback.answer("üíî")
    
    await send_new_profile(callback)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
async def send_new_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_random_profile(exclude_user_id=user_id)
    if user:
        age = calculate_age(user["birthdate"])
        profile_text = (
            f"{user['name']}, "
            f"{age}, "
            f"{user['city']}  ‚Äî "
            f"{user['description'] if user['description'] else ''}"
        )
        keyboard = get_browse_keyboard(user["id"])  # –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã –≤ –∫–Ω–æ–ø–∫—É

        if user["photo_id"]:
            await callback.message.answer_photo(photo=user["photo_id"], caption=profile_text, reply_markup=keyboard)
        else:
            await callback.message.answer(profile_text, reply_markup=keyboard)
    else:
        await callback.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=main_menu)