import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import SessionLocal
from models import User
from keyboards import main_menu
from aiogram.types import ReplyKeyboardRemove

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class EditProfile(StatesGroup):
    choose_field = State()
    new_value = State()

# üìú –ö–Ω–æ–ø–∫–∞ "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"
@router.message(lambda msg: msg.text == "üìú –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def my_profile(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.")

    with SessionLocal() as db:
        user = db.query(User).filter(User.id == user_id).first()

        if user:
            profile_text = (f"üìú –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n"
                            f"üë§ –ò–º—è: {user.name}\n"
                            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birthdate}\n"
                            f"üèô –ì–æ—Ä–æ–¥: {user.city}\n"
                            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user.description if user.description else '‚Äî'}")
            
            if user.photo_id:
                await message.answer_photo(photo=user.photo_id, caption=profile_text, reply_markup=main_menu)
            else:
                await message.answer(profile_text, reply_markup=main_menu)
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –Ω–æ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.")

# üö´ –ö–Ω–æ–ø–∫–∞ "–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(lambda msg: msg.text == "üö´ –í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def disable_profile(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.")

    with SessionLocal() as db:
        user = db.query(User).filter(User.id == user_id).first()
        
        if user:
            user.is_active = False
            db.commit()
            logger.info(f"–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            await message.answer("üîï –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç–µ–±—è –Ω–µ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤ –ø–æ–∏—Å–∫–µ.", reply_markup=ReplyKeyboardRemove())
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –Ω–æ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.")

# ‚úè –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(lambda msg: msg.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def edit_profile_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üë§ –ò–º—è"), types.KeyboardButton(text="üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")],
            [types.KeyboardButton(text="üèô –ì–æ—Ä–æ–¥"), types.KeyboardButton(text="üñº –§–æ—Ç–æ")],
            [types.KeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(EditProfile.choose_field)

# –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(EditProfile.choose_field)
async def process_edit_choice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {message.text}")

    field_mapping = {
        "üë§ –ò–º—è": "name",
        "üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": "birthdate",
        "üèô –ì–æ—Ä–æ–¥": "city",
        "üñº –§–æ—Ç–æ": "photo_id",
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ": "description"
    }

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.")
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        await state.clear()
        return

    if message.text not in field_mapping:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {message.text}")
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(field=field_mapping[message.text])
    
    if message.text == "üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è":
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    elif message.text == "üñº –§–æ—Ç–æ":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.")
    else:
        await message.answer(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {message.text}:")
    
    await state.set_state(EditProfile.new_value)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@router.message(EditProfile.new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_value = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}")

    user_data = await state.get_data()
    field = user_data["field"]

    with SessionLocal() as db:
        user = db.query(User).filter(User.id == user_id).first()

        if not user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –Ω–æ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è.")
            await state.clear()
            return

        if field == "birthdate":
            try:
                from datetime import datetime
                new_value = datetime.strptime(new_value, "%Y-%m-%d").date()
            except ValueError:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É: {new_value}")
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000-05-15).")
                return

        if field == "photo_id":
            if not message.photo:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
                return
            new_value = message.photo[-1].file_id

        setattr(user, field, new_value)
        db.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª {field} –Ω–∞ {new_value}")

    await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_menu)
    await state.clear()